menu = {
    "espresso": {
        "ingredients": {
            "water": 50,
            "coffee": 18,
        },
        "cost": 1.5,
    },
    "latte": {
        "ingredients": {
            "water": 200,
            "milk": 150,
            "coffee": 24,
        },
        "cost": 2.5,
    },
    "cappuccino": {
        "ingredients": {
            "water": 250,
            "milk": 100,
            "coffee": 24,
        },
        "cost": 3.0,
    }
}

resources = {
    "water": 300,
    "milk": 200,
    "coffee": 100,
}



def show_report(resources, money):
    '''Função mostra quando tem de cada item no estoque'''
    for item in resources:
        if item == 'water' or item == 'milk':
            print(f'{item}: {resources[item]}ml')
        elif item == 'coffee':
            print(f'{item}: {resources[item]}g')
    print(f'Money: ${money}')


def enough_resources(menu, would_you_like, resources):
    '''Verifica se existem recursos o suficiente no estoque para atender ao pedido do cliente.
    Caso não tenha, retorna a mensagem de qual item está faltando.'''
    for i in menu:
        if i == would_you_like:
            for ingredients in menu[i]['ingredients']:
                if resources[ingredients] < menu[i]['ingredients'][ingredients]:
                    print(f"Sorry there is not enough {ingredients}")
                    return False


# Pagamento
def payment(menu, would_you_like, pay):
    '''Função que compara se o valor que o cliente pagou é o maior ou menor ao preço do produto. Caso seja menor,
    retorna a mensagem de que não é o suficiente e o dinheiro é reembolsado. Caso seja maior, a máquina oferece o
    troco.'''
    for item in menu:
        if item == would_you_like:
            if pay < menu[item]['cost']:
                print("Sorry, that's not enough money. Money refunded.")
                order_execution = False
            elif pay > menu[item]['cost']:
                change = pay - menu[item]['cost']
                print(f"Here is ${round(change, 2)} dollars in change")


def make_order(menu, resources):
    '''Retira do estoque as quantidades necessárias para produzir o produto do cliente.'''
    for i in menu:
        if i == would_you_like:
            for ingredients in menu[i]['ingredients']:
                resources[ingredients] -= menu[i]['ingredients'][ingredients]


# Máquina de café
def coffee_machine():
    money = 0

    machine_execution = True
    while machine_execution == True:

        would_you_like = input('What would you like? (espresso/latte/cappuccino): ')
        order_execution = True

        while order_execution == True:

            #Solicitação de desligamento da order
            if would_you_like == 'off':
                machine_execution = False

            #Mostrar a situação do estoque atual
            elif would_you_like == 'report':
                show_report(resources, money)
                order_execution = False

            else:
                #Caso a função que verifica se tem recursos o suficiente retornar 'false',
                #a execução da order é abortada.
                if enough_resources(menu, would_you_like, resources) == False:
                    order_execution = False

                else:
                    #solicitação de pagamento
                    pay = float(input('Please, insert your coins: '))
                    money += pay

                    # pagamento
                    payment(menu, would_you_like, pay)

                    # retirando os itens do estoque
                    make_order(menu, resources)

                    #entrega do pedido ao cliente
                    print(f"Here is your {would_you_like}. Enjoy!")
                    order_execution = False